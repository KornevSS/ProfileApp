//
//  NewCompanyFindViewController.swift
//  ProfileApp
//
//  Created by –°–µ—Ä–≥–µ–π –ö–æ—Ä–Ω–µ–≤ on 01.03.2021.
//

import UIKit

class NewCompanyViewController: UIViewController {
    
    var delegate: NewCompanyViewControllerDelegate!
    
    @IBOutlet var companyInnTextField: UITextField!
    @IBOutlet var addButton: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        companyInnTextField.addTarget(
            self,
            action: #selector(companyInnTextFieldDidChanged),
            for: .editingChanged
        )
    }
    
    @objc private func companyInnTextFieldDidChanged() {
        guard let name = companyInnTextField.text else { return }
        addButton.isEnabled = !name.isEmpty ? true : false
    }
    
    @IBAction func cancelButtonPressed() {
        dismiss(animated: true)
    }
    
    @IBAction func addButtonPressed() {
        
        guard let textValue = companyInnTextField.text else { return }

        NetworkManager.shared.fetchData(with: textValue) { companies in
            if let companies = companies {
                self.delegate.newCompany(companies)
                self.companyInnTextField.textColor = .green
                self.successAlert() {
                    self.companyInnTextField.textColor = .black
                }
            } else {
                self.companyInnTextField.textColor = .red
                self.failedAlert() {
                    self.companyInnTextField.textColor = .black
                }
            }
        }
        
    }
    
}

extension NewCompanyViewController {

    private func alert(completionHandler: @escaping () -> Void, title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let action = UIAlertAction(title: "OK", style: .default) {_ in
            completionHandler()
        }
        alert.addAction(action)
        present(alert, animated: true)
    }

    private func successAlert(completionHandler: @escaping () -> Void) {
        alert(completionHandler: completionHandler, title: "–£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ‚úÖ", message: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞")
    }

    private func failedAlert(completionHandler: @escaping () -> Void) {
        alert(completionHandler: completionHandler, title: "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üö´", message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    }

}
